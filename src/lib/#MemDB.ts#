
import { DuplicatedKeyUniqueValueHashMap } from "datacell-collections";
import { AbstractDB } from "./AbstractDB";
import { MemDbTable } from "./MemDbTable";
import { DataCell } from "./DataCell";
import { Readable, Transform } from "stream";
import * as streamlib from "datacell-streamlib";

import * as log4js from "log4js";
const logger = log4js.getLogger();
// logger.level = "debug";



export class MemDB extends AbstractDB {

    tables: Map<string, MemDbTable>;

    constructor() {
        super();
    }


    async connect(arg?: object): Promise<void> {
        this.tables = new Map<string, MemDbTable>();
        this.nameConverter.init(this);
    }

    async disconnect(): Promise<void> {
        // nothing to do.
    }



    /** @inheritdoc */
    async _createTable(tableName: string): Promise<string> {

        if (await this._hasTable(tableName) === true) {
            return tableName;
        }
        else {
            const table = new MemDbTable();
            this.tables.set(tableName, table);

            return tableName;
        }
    }




    /** @inheritdoc */
    async _hasTable(tableName: string): Promise<boolean> {
        return this.tables.has(tableName);
    }



    /** @inheritdoc */
    async _deleteTable(tableName: string): Promise<string> {
        if (await this._hasTable(tableName) === true) {
            this.tables.delete(tableName);
            return tableName;
        }
        else {
            return null;
        }
    }




    /** @inheritdoc */
    async getAllTablesIncludingManagementTables(): Promise<Readable> {

        const iter: IterableIterator<string> = this.tables.keys();

        return new Readable({
            objectMode: true,
            read() {
                const k: IteratorResult<string> = iter.next();
                if (!k.done) {
                    this.push(k.value);
                }
                else {
                    this.push(null);
                }
            }

        });
    }



    /** @inheritdoc */
    async _getIDs(tableName: string): Promise<Readable> {

        const table: MemDbTable = this.tables.get(tableName);
        const idIter: IterableIterator<string> = table.keys();

        return new Readable({
            objectMode: true,
            read() {
                const idObj: IteratorResult<string> = idIter.next();
                if (idObj.done) {
                    this.push(null);
                }
                else {
                    const id: string = idObj.value;
                    this.push(id);
                }
            }
        });
    }




    /** @inheritdoc */
    async _getPredicates(category: string, objectID: string): Promise<Readable> {

        const rst: Readable = await this.getAllTables();

        return rst
            .pipe(streamlib.getAsyncFilter(1, async (tableName) => {
                // names = [category, predicate]
                const names = this.nameConverter.parseTableName(tableName.toString());
                return await this.nameConverter.getOriginalName(names[0]) === category;
            }))
            .pipe(streamlib.getAsyncFilter(1, async (tableName) => {
                return this.tables.get(tableName.toString()).has(objectID);
            }))
            .pipe(streamlib.getAsyncMap(1, async (tableName: Buffer) => {
                // names = [category, predicate]
                const names: string[] = this.nameConverter.parseTableName(tableName.toString());
                const predicate: string = await this.nameConverter.getOriginalName(names[1]);
                return Buffer.from(predicate, 'utf8');
            }))


    }



    /** @inheritdoc */
    async _getValues(tableName: string, objectID: string): Promise<Readable> {

        const hasTable: boolean = await this._hasTable(tableName);
        const hasId: boolean = await this._hasID(tableName, objectID);

        if (!hasTable || !hasId) {
            return Readable.from([]);
        }

        const values: string[] = this.tables.get(tableName).get(objectID);
        return Readable.from(values);
    }




    /** @inheritdoc */
    async _getRows(tableName: string, objectID: string): Promise<Readable> {
        // This method returns a Promise of a Readable stream of DataCell objects.

        const r_stream: Readable = await this._getAllRows(tableName);

        const oID = objectID; // renaming the variable for readability.
        return r_stream
            .pipe(new Transform({
                readableObjectMode: true,
                writableObjectMode: true,
                transform(chunk, encode, done) {
                    let { category, objectId, predicate, value } = chunk;
                    if (objectId === oID) {
                        this.push(new DataCell(category, objectId, predicate, value));
                    }
                    done();
                }
            }));
    }




    /** @inheritdoc */
    async _getAllRows(tableName: string): Promise<Readable> { // Returns Readable stream of DataCell objects.

        const names: string[] = this.nameConverter.parseTableName(tableName);
        logger.debug("names: " + names);

        // there is no original name against the maintainance tables,
        // because those tables are not created by calling DataCellStore's put methods.
        const category: string = await this.nameConverter.getOriginalName(names[0]);
        const predicate: string = await this.nameConverter.getOriginalName(names[1]);
        logger.debug("category: " + category);
        logger.debug("predicate: " + predicate);


        return this.tables.get(tableName)
            .getAllRows()
            .pipe(new Transform({
                readableObjectMode: true,
                writableObjectMode: true,
                transform(chunk, encode, done) {
                    let { id, value } = chunk;
                    this.push(new DataCell(category, id, predicate, value));
                    done();
                }
            }));

    }



    /** @inheritdoc */
    async _hasID(tableName: string, objectID: string): Promise<boolean> {

        if (!await this._hasTable(tableName)) {
            return false;
        }
        else {
            return this.tables.get(tableName).has(objectID);
        }
    }




    /** @inheritdoc */
    async _hasRow(tableName: string, objectID: string, value: string): Promise<boolean> {

        const hasTable: boolean = await this._hasTable(tableName);
        const hasId: boolean = await this._hasID(tableName, objectID);

        if (!hasTable || !hasId) {
            return false;
        }

        const values: string[] = this.tables.get(tableName).get(objectID);
        if (values === null) {
            return false;
        }
        else {
            return values.indexOf(value) >= 0;
        }
    }




    /** @inheritdoc */
    async _addRow(tableName: string, objectID: string, value: string): Promise<void> {

        // This method assumes that the table has already existed.

        if (this.tables.get(tableName).has(objectID)) {
            this.tables.get(tableName).get(objectID).push(value);
        }
        else {
            this.tables.get(tableName).put(objectID, value);
        }
    }



    async _deleteID(tableName: string, objectID: string): Promise<string> {
        this.tables.get(tableName).removeKey(objectID);
        return;
    }



    /** @inheritdoc */
    async _deleteRows(tableName: string, id: string, value: string): Promise<void> {

        // (id, value) pairs can be exist more than one.
        // This method removes all the (id, value) pairs.


        if (this.tables.get(tableName).has(id)) {
            const values: string[] = this.tables.get(tableName).get(id);
            const newValues: string[] = [];

            values.forEach((v) => {
                if (v !== value) {
                    newValues.push(v);
                }
            });

            this.tables.get(tableName).set(id, newValues);
        }
    }



    async _categoryToObjectIDs(category: string): Promise<Readable> {

        const tableObj: Map<string, MemDbTable> = this.tables;

        const r_stream: Readable = await this.getAllTables();

        return r_stream
            .pipe(new streamlib.Filter(async (tableName) => {
                // names = [category, predicate]
                const names: string[] = this.nameConverter.parseTableName(tableName);
                const c: string = await this.nameConverter.getOriginalName(names[0]);
                return category === c;
            }))
            .pipe(new Transform({
                defaultEncoding: 'utf8',
                readableObjectMode: true,
                writableObjectMode: true,
                transform(tableName, encoding, done) {
                    // ImmutableSet of objectIDs.
                    const idIter: IterableIterator<string> = tableObj.get(tableName).keys();

                    while (true) {
                        const idObj = idIter.next();
                        if (idObj.done) {
                            this.push(null);
                            break;
                        }
                        else {
                            this.push(idObj.value);
                        }
                    }
                    done();
                },
                flush(done) {
                    this.push(null);
                    done();
                }
            }));

    }


}
